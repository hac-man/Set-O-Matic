<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #><#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Configuration.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

// This code was generated by a T4 template. Do not edit directly. Instead, edit the applciation's configuration file (App.config/Web.Config) and regenerate this code by running "Run Custom Tool" on the SetOMatic.tt file.
<#
    // This T4 template generates a static class with properties for each app setting defined in the App.config file.
    var hostServiceProvider = (IServiceProvider)Host;
    var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var activeSolutionProjects = (Array)dte.ActiveSolutionProjects; 
    var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
    var defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value;
    var templateDir = Path.GetDirectoryName(Host.TemplateFile);
    var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();
    fullPath = fullPath.EndsWith("\\")
            ? fullPath.Substring(0, fullPath.Length-1)
            : fullPath;
    var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
    var fileNamespace = defaultNamespace; //string.Concat(defaultNamespace, subNamespace);
#>
using System;
using System.Collections.Generic;
using System.Xml;
using System.Linq;

namespace <#=fileNamespace#>
{   
   public class SetOMatic
   {
        static List<KeyValuePair<string, KeyValuePair<string, string>>> _settings = new List<KeyValuePair<string, KeyValuePair<string, string>>>();

        public SetOMatic()
        {
            try
            {
                if (!Settings.IsLoaded)
                {
                    _settings = GetAllConfigSettings(AppDomain.CurrentDomain.SetupInformation.ConfigurationFile);
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error loading settings from configuration file: {ex.Message}", ex);
            }
        }

    internal void LoadSettings()
    {
        foreach (var setting in _settings)
        {                   
            var SettingsProp = typeof(Settings).GetNestedType(setting.Key).GetProperty(setting.Value.Key.Replace('.', '_'));
            if (SettingsProp != null)
            {
                //get matching setting
                    var match = _settings.Where(c => c.Key == setting.Key && c.Value.Key == setting.Value.Key).FirstOrDefault();

                    switch (SettingsProp.PropertyType.Name)
                    {
                        case "String":
                            SettingsProp.SetValue(null, match.Value.Value.ToString());
                            break;
                        case "Int32":
                            if (int.TryParse(match.Value.Value.ToString(), out int intValue))
                            {
                                SettingsProp.SetValue(null, intValue);
                            }
                            else
                            {
                                throw new InvalidCastException($"Invalid Int32 format for setting '{setting}': {match.Value.Value.ToString()}");
                            }
                            break;
                        case "Boolean":
                            if (bool.TryParse(match.Value.Value.ToString(), out bool boolValue))
                            {
                                SettingsProp.SetValue(null, boolValue);
                            }
                            else
                            {
                                throw new InvalidCastException($"Invalid Boolean format for setting '{setting}': {match.Value.Value.ToString()}");
                            }
                            break;
                        case "DateTime":
                            if (DateTime.TryParse(match.Value.Value.ToString(), out DateTime dateTimeValue))
                            {
                                SettingsProp.SetValue(null, dateTimeValue);
                            }
                            else
                            {
                                throw new InvalidCastException($"Invalid DateTime format for setting '{setting}': {match.Value.Value.ToString()}");
                            }
                            break;
                        case "Double":

                            if (double.TryParse(match.Value.Value.ToString(), out double doubleValue))
                            {
                                SettingsProp.SetValue(null, doubleValue);
                            }
                            else
                            {
                                throw new InvalidCastException($"Invalid Double format for setting '{setting}': {match.Value.Value.ToString()}");
                            }
                            break;
                        default:
                           throw new InvalidCastException($"Unsupported type '{SettingsProp.PropertyType.Name}' for setting '{setting}'. Skipping.");
                    }
                }
            }
        }

        List<KeyValuePair<string, KeyValuePair<string, string>>> GetAllConfigSettings(string ConfigPath)
        {
            XmlDocument configFile = new XmlDocument();
            configFile.Load(ConfigPath);
            return GetChildSettingSections(configFile.DocumentElement);
        }
        
        List<KeyValuePair<string, KeyValuePair<string, string>>> GetChildSettingSections(XmlNode ParentNode)
        {
            List<KeyValuePair<string, KeyValuePair<string, string>>> ret = new List<KeyValuePair<string, KeyValuePair<string, string>>>();

            if (ParentNode.ChildNodes.Count > 0)
            {
                foreach (XmlNode childNode in ParentNode.ChildNodes)
                {
                    if (!childNode.HasChildNodes && childNode.Name == "add")
                    {
                        string sectionName = ParentNode.Name;
                        string key = null;
                        string value = null;

                        for (int i = 0; i < childNode.Attributes.Count; i++)
                        {
                            var cNode = childNode.Attributes[i];
              
                            if (cNode.Name == "key")
                            {
                                if (string.IsNullOrEmpty(cNode.Value))
								{
									throw new Exception("Key attribute is required for 'add' elements.");
								}
                                else
                                {                                
                                    key = cNode.Value;
                                }
                            }
                            if (cNode.Name == "value")
                            {
                                if (string.IsNullOrEmpty(cNode.Value))
                                {
									throw new Exception("Value attribute is required for 'add' elements.");
								}
                                else
                                {
                                    value = cNode.Value;
                                }
                            }
                            if (cNode.Name == "name")
                            {
                                if (string.IsNullOrEmpty(cNode.Value))
                                {
                                    throw new Exception($"Name attribute is required for {cNode.Value}.");
                                }
                                else
                                {
                                    key = cNode.Value;
                                }
                            }
                            if (cNode.Name == "connectionString")
                            {
                                if (string.IsNullOrEmpty(cNode.Value))
                                {
                                    throw new Exception($"Value attribute is required for {cNode.Name}.");
                                }
                                else
                                {
                                    value = cNode.Value;
                                }
                            }

                        }

                        ret.Add(new KeyValuePair<string, KeyValuePair<string, string>>(sectionName, new KeyValuePair<string, string>(key, value)));
                    }
                    else if (childNode.HasChildNodes)
                    {
                        ret.AddRange(GetChildSettingSections(childNode)); // Recursive call to handle nested sections
                    }
                }
            }

            return ret;
        }
    }
}
