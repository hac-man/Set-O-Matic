<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #><#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ Assembly Name="System.Configuration.dll" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

// This code was generated by the template Settings.tt. Do not edit directly. Instead, edit the applciation's configuration file (App.config/Web.Config) and regenerate this code.
<#
    // This T4 template generates a static class with properties for each app setting defined in the App.config file.
    var hostServiceProvider = (IServiceProvider)Host;
    var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
    var activeSolutionProjects = (Array)dte.ActiveSolutionProjects; 
    var dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
    var defaultNamespace = dteProject.Properties.Item("DefaultNamespace").Value;
    var templateDir = Path.GetDirectoryName(Host.TemplateFile);
    var fullPath = dteProject.Properties.Item("FullPath").Value.ToString();
    fullPath = fullPath.EndsWith("\\")
            ? fullPath.Substring(0, fullPath.Length-1)
            : fullPath;
    var subNamespace = templateDir.Replace(fullPath, string.Empty).Replace("\\", ".");
    var fileNamespace = defaultNamespace; // string.Concat(defaultNamespace, subNamespace);
#>    
using System;
using System.Configuration;

namespace <#=fileNamespace#>
{
    public static class Settings
    {

        public static bool IsLoaded{get; set;}

        static void Initialize(){
            //force the main static constructor to run
        }

        static Settings()
		{
            if (!IsLoaded)
            {
			    new SetOMatic().LoadSettings();
            }
		}
<#
    string configFile = string.Empty;
    if (File.Exists(this.Host.ResolvePath("..\\App.Config")))
    {
        configFile = this.Host.ResolvePath("..\\App.Config");
	}
	else if (File.Exists(this.Host.ResolvePath("..\\Web.Config")))
	{
		configFile = this.Host.ResolvePath("..\\Web.Config");
	}
	else
	{
		throw new FileNotFoundException("App.config or Web.config not found in the project directory."); 
	}

    var appSettings = GetAllConfigSettings(configFile).OrderBy(s => s.Key);

    string previousSection = null; // used to track the current section
    string currentSection = null;  // used to detect a new section 

    //iterate through each setting by section, creating a child class for each section


    foreach (var setting in appSettings) 
    {
        currentSection = setting.Key; // Get the current section name
        // Check if the section has changed
                if (previousSection != currentSection && previousSection != null)
        {
        #>
    }
<#
       
	    }
        if (previousSection == null || previousSection != currentSection)
	    {
        #>
        public static class <#=setting.Key #>
        {
            static <#=setting.Key#>()
		    {            
               Initialize();
                
		    }
    <#   
            }
                KeyValuePair<string, string> setPair = setting.Value;
            #>
        public static <#=GetPropertyType(GetTypeByValue(setPair.Value).Name)#> <#=setPair.Key.Replace('.', '_')#> {get; set;}
    <#

              previousSection = currentSection;
         }#>
    }
    }
}
<#
      static Type GetTypeByValue(string Value)
        {
            if (int.TryParse(Value, out _))
            {
                return typeof(int);
            }
            else if (bool.TryParse(Value, out _))
            {
                return typeof(bool);
            }
            else if (double.TryParse(Value, out _))
            {
                return typeof(double);
            }
            else if (float.TryParse(Value, out _))
            {
                return typeof(float);
            }
            else if (long.TryParse(Value, out _))
            {
                return typeof(long);
            }
            else if (DateTime.TryParse(Value, out _))
            {
                return typeof(DateTime);
            }
            else
            {
                return typeof(string);
            }

        }

        static Dictionary<string, string> GetProjectAppSetting(string ConfigPath)
		{   
            XmlDocument configFile = new XmlDocument();
            configFile.Load(ConfigPath);
            XmlNode appSettingsNode = configFile.SelectSingleNode("/configuration/appSettings");
            Dictionary<string, string> appSettings = new Dictionary<string, string>();
            if (appSettingsNode != null)
			{
				foreach (XmlNode settingNode in appSettingsNode.ChildNodes)
				{
					if (settingNode.NodeType == XmlNodeType.Element && settingNode.Name == "add")
					{
						string key = settingNode.Attributes["key"]?.Value;
						string value = settingNode.Attributes["value"]?.Value;
						if (!string.IsNullOrEmpty(key) && !string.IsNullOrEmpty(value))
						{
							appSettings[key] = value;
						}
					}
				}
			}
			
			return appSettings;
		}

        static string GetPropertyType(string ReflectedType)
        {
            switch (ReflectedType)
			{
				case "Int32":
					return "int";
				case "Boolean":
					return "bool";
				case "Double":
					return "double";
				case "Single":
					return "float";
				case "Int64":
					return "long";
				case "DateTime":
					return "DateTime";
				default:
					return "string";
			}
        }
        
        static List<KeyValuePair<string, KeyValuePair<string, string>>> GetAllConfigSettings(string ConfigPath)
        {
            XmlDocument configFile = new XmlDocument();
            configFile.Load(ConfigPath);
            return GetChildSettingSections(configFile.DocumentElement);
        }

        static List<KeyValuePair<string, KeyValuePair<string, string>>> GetChildSettingSections(XmlNode ParentNode)
        {
            List<KeyValuePair<string, KeyValuePair<string, string>>> ret = new List<KeyValuePair<string, KeyValuePair<string, string>>>();
            
            if (ParentNode.ChildNodes.Count > 0)
            {
                foreach (XmlNode childNode in ParentNode.ChildNodes)
                {
                    if (!childNode.HasChildNodes && childNode.Name == "add")
                    {
                        //KeyValuePair<string, KeyValuePair<string, string>> setting = new KeyValuePair<string, KeyValuePair<string, string>>()
                        string sectionName = ParentNode.Name;
                        string key = null;
                        string value = null;

                        for (int i = 0; i < childNode.Attributes.Count; i++)
                        {
                            if (childNode.Attributes[i].Name == "Key" && string.IsNullOrEmpty(childNode.Attributes[i].Value))
                            {
                                throw new Exception("Key attribute is required for 'add' elements.");
                            }
                            if (childNode.Attributes[i].Name == "value" && string.IsNullOrEmpty(childNode.Attributes[i].Value))
                            {
                                throw new Exception("Value attribute is required for 'add' elements.");
                            }
                            if (childNode.Attributes[i].Name == "key")
                            {
                               key = childNode.Attributes[i].Value;
                            }
                            if (childNode.Attributes[i].Name == "value")
                            {
                                value = childNode.Attributes[i].Value;
                            }
                            if (childNode.Attributes[i].Name == "name")
                            {
                                key = childNode.Attributes[i].Value;
                            }
                            if (childNode.Attributes[i].Name == "connectionString")
							{
								value = childNode.Attributes[i].Value;
							}
                        }

                        ret.Add(new KeyValuePair<string, KeyValuePair<string, string>>(sectionName, new KeyValuePair<string, string>(key, value)));

                    }
                    else if (childNode.HasChildNodes)
                    {
                        ret.AddRange(GetChildSettingSections(childNode)); // Recursive call to handle nested sections
                    }
                }
            }

            return ret;
        }
    

#>
